#!/bin/bash

# Script de build de production pour Scio Flutter
# Ce script g√©n√®re les builds pour Android et iOS pr√™ts pour les stores

echo "üöÄ D√©but du processus de build de production pour Scio Flutter"
echo "================================================================"

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# V√©rification des pr√©requis
echo -e "${BLUE}üìã V√©rification des pr√©requis...${NC}"

# V√©rifier Flutter
if ! command -v flutter &> /dev/null; then
    echo -e "${RED}‚ùå Flutter n'est pas install√© ou pas dans le PATH${NC}"
    exit 1
fi

# V√©rifier la version de Flutter
FLUTTER_VERSION=$(flutter --version | head -n 1 | cut -d ' ' -f 2)
echo -e "${GREEN}‚úÖ Flutter $FLUTTER_VERSION d√©tect√©${NC}"

# Nettoyer le projet
echo -e "${BLUE}üßπ Nettoyage du projet...${NC}"
flutter clean
flutter pub get

# Analyser le code
echo -e "${BLUE}üîç Analyse du code...${NC}"
flutter analyze
if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Erreurs d'analyse d√©tect√©es. Veuillez les corriger avant de continuer.${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ Analyse du code r√©ussie${NC}"

# Ex√©cuter les tests
echo -e "${BLUE}üß™ Ex√©cution des tests...${NC}"
flutter test
if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Tests √©chou√©s. Veuillez les corriger avant de continuer.${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ Tests r√©ussis${NC}"

# Cr√©er le dossier de builds
mkdir -p builds/release

# Build Android
echo -e "${BLUE}ü§ñ Build Android en cours...${NC}"
echo -e "${YELLOW}   G√©n√©ration de l'APK...${NC}"
flutter build apk --release --split-per-abi
if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ APK g√©n√©r√© avec succ√®s${NC}"
    cp build/app/outputs/flutter-apk/*.apk builds/release/
else
    echo -e "${RED}‚ùå √âchec de la g√©n√©ration de l'APK${NC}"
fi

echo -e "${YELLOW}   G√©n√©ration de l'App Bundle (AAB)...${NC}"
flutter build appbundle --release
if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ App Bundle g√©n√©r√© avec succ√®s${NC}"
    cp build/app/outputs/bundle/release/app-release.aab builds/release/
else
    echo -e "${RED}‚ùå √âchec de la g√©n√©ration de l'App Bundle${NC}"
fi

# Build iOS (seulement sur macOS)
if [[ "$OSTYPE" == "darwin"* ]]; then
    echo -e "${BLUE}üçé Build iOS en cours...${NC}"
    flutter build ios --release --no-codesign
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Build iOS r√©ussi${NC}"
        echo -e "${YELLOW}üìù Note: Vous devrez signer l'application dans Xcode pour la distribution${NC}"
    else
        echo -e "${RED}‚ùå √âchec du build iOS${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Build iOS ignor√© (disponible seulement sur macOS)${NC}"
fi

# Build Web
echo -e "${BLUE}üåê Build Web en cours...${NC}"
flutter build web --release
if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Build Web r√©ussi${NC}"
    cp -r build/web builds/release/web
else
    echo -e "${RED}‚ùå √âchec du build Web${NC}"
fi

# R√©sum√©
echo -e "\n${GREEN}üéâ Processus de build termin√© !${NC}"
echo -e "${BLUE}üìÅ Fichiers g√©n√©r√©s dans le dossier 'builds/release/':${NC}"
ls -la builds/release/

echo -e "\n${BLUE}üì± √âtapes suivantes pour la publication :${NC}"
echo -e "${YELLOW}Android (Google Play Store):${NC}"
echo -e "   1. Utilisez app-release.aab pour la publication"
echo -e "   2. Configurez la signature de l'application"
echo -e "   3. T√©l√©chargez sur Google Play Console"

echo -e "\n${YELLOW}iOS (App Store):${NC}"
echo -e "   1. Ouvrez le projet iOS dans Xcode"
echo -e "   2. Configurez les certificats et profils de provisioning"
echo -e "   3. Archivez et t√©l√©chargez sur App Store Connect"

echo -e "\n${YELLOW}Web:${NC}"
echo -e "   1. D√©ployez le dossier 'web' sur votre serveur"
echo -e "   2. Configurez HTTPS et les headers de s√©curit√©"

echo -e "\n${GREEN}‚ú® Build de production termin√© avec succ√®s !${NC}" 